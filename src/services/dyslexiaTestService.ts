import type { DyslexiaAnswer, DyslexiaTestResult, ModuleScore, DyslexiaQuestion } from '../data/dyslexiaQuestions';
import { DyslexiaModule, DyslexiaRiskLevel } from '../enum';

export class DyslexiaTestService {
  
  /**
   * T√≠nh ƒëi·ªÉm cho m·ªôt c√¢u h·ªèi d·ª±a tr√™n ƒë·ªô ch√≠nh x√°c v√† th·ªùi gian
   */
  static calculateQuestionScore(
    isCorrect: boolean, 
    maxScore: number, 
    responseTime: number
  ): number {
    if (!isCorrect) return 0;
    
    // Th·ªùi gian l√Ω t∆∞·ªüng: 10-30 gi√¢y cho tr·∫ª 4-5 tu·ªïi
    if (responseTime <= 30) {
      return maxScore; // ƒêi·ªÉm t·ªëi ƒëa
    } else if (responseTime <= 45) {
      return Math.max(1, maxScore - 1); // Tr·ª´ 1 ƒëi·ªÉm
    } else {
      return Math.max(0, maxScore - 2); // Tr·ª´ 2 ƒëi·ªÉm
    }
  }

  /**
   * T√≠nh ƒëi·ªÉm t·ª´ng module
   */
  static calculateModuleScores(
    answers: DyslexiaAnswer[], 
    questions: DyslexiaQuestion[]
  ): { [key: string]: ModuleScore } {
    const moduleScores: { [key: string]: ModuleScore } = {};
    
    // Kh·ªüi t·∫°o ƒëi·ªÉm cho t·ª´ng module
    Object.values(DyslexiaModule).forEach(module => {
      moduleScores[module] = {
        score: 0,
        maxScore: 0,
        percentage: 0,
        questionsCount: 0
      };
    });

    // T√≠nh ƒëi·ªÉm th·ª±c t·∫ø
    answers.forEach(answer => {
      const question = questions.find(q => q.id === answer.questionId);
      if (question) {
        const module = question.module;
        moduleScores[module].score += answer.score;
        moduleScores[module].maxScore += question.maxScore;
        moduleScores[module].questionsCount += 1;
      }
    });

    // T√≠nh ph·∫ßn trƒÉm
    Object.keys(moduleScores).forEach(module => {
      const data = moduleScores[module];
      data.percentage = data.maxScore > 0 ? (data.score / data.maxScore) * 100 : 0;
    });

    return moduleScores;
  }

  /**
   * X√°c ƒë·ªãnh m·ª©c ƒë·ªô r·ªßi ro d·ª±a tr√™n ƒëi·ªÉm s·ªë
   */
  static determineRiskLevel(
    overallPercentage: number, 
    moduleScores: { [key: string]: ModuleScore }
  ): DyslexiaRiskLevel {
    // ƒê·∫øm s·ªë module c√≥ ƒëi·ªÉm th·∫•p (< 50%)
    const lowScoringModules = Object.values(moduleScores).filter(
      module => module.percentage < 50 && module.questionsCount > 0
    ).length;

    // Logic x√°c ƒë·ªãnh r·ªßi ro
    if (overallPercentage >= 70 && lowScoringModules <= 1) {
      return DyslexiaRiskLevel.LOW;
    } else if (overallPercentage >= 50 && lowScoringModules <= 2) {
      return DyslexiaRiskLevel.MEDIUM;
    } else {
      return DyslexiaRiskLevel.HIGH;
    }
  }

  /**
   * T·∫°o khuy·∫øn ngh·ªã d·ª±a tr√™n k·∫øt qu·∫£
   */
  static generateRecommendations(
    riskLevel: DyslexiaRiskLevel, 
    moduleScores: { [key: string]: ModuleScore }
  ): string {
    const recommendations: string[] = [];

    if (riskLevel === DyslexiaRiskLevel.LOW) {
      recommendations.push("‚úÖ K·∫øt qu·∫£ t·ªët! Tr·∫ª kh√¥ng c√≥ d·∫•u hi·ªáu r·ªßi ro dyslexia.");
      recommendations.push("üìö Ti·∫øp t·ª•c khuy·∫øn kh√≠ch tr·∫ª ƒë·ªçc s√°ch v√† luy·ªán t·∫≠p h√†ng ng√†y.");
      recommendations.push("üéØ C√≥ th·ªÉ tham gia c√°c ho·∫°t ƒë·ªông ng√¥n ng·ªØ ph√π h·ª£p ƒë·ªô tu·ªïi.");
      recommendations.push("üëÄ Theo d√µi ƒë·ªãnh k·ª≥ s·ª± ph√°t tri·ªÉn ng√¥n ng·ªØ c·ªßa tr·∫ª.");
      
    } else if (riskLevel === DyslexiaRiskLevel.MEDIUM) {
      recommendations.push("‚ö†Ô∏è Tr·∫ª c√≥ m·ªôt s·ªë d·∫•u hi·ªáu c·∫ßn theo d√µi th√™m.");
      recommendations.push("üë®‚Äçüè´ N√™n tham kh·∫£o √Ω ki·∫øn gi√°o vi√™n v√† chuy√™n gia ng√¥n ng·ªØ.");
      recommendations.push("üìñ TƒÉng c∆∞·ªùng luy·ªán t·∫≠p ƒë·ªçc vi·∫øt v·ªõi s·ª± h·ªó tr·ª£ c·ªßa ng∆∞·ªùi l·ªõn.");
      recommendations.push("‚è∞ Th·ª±c hi·ªán test l·∫°i sau 3-6 th√°ng ƒë·ªÉ theo d√µi ti·∫øn tri·ªÉn.");
      
      // Khuy·∫øn ngh·ªã c·ª• th·ªÉ theo module y·∫øu
      const weakModules = Object.entries(moduleScores)
        .filter(([_, data]) => data.percentage < 50 && data.questionsCount > 0)
        .map(([module, _]) => this.getModuleName(module));
        
      if (weakModules.length > 0) {
        recommendations.push(`üéØ T·∫≠p trung luy·ªán t·∫≠p: ${weakModules.join(', ')}`);
      }
      
    } else { // HIGH risk
      recommendations.push("üö® Tr·∫ª c√≥ nguy c∆° cao v·ªÅ dyslexia - c·∫ßn can thi·ªáp s·ªõm.");
      recommendations.push("üè• Khuy·∫øn ngh·ªã thƒÉm kh√°m chuy√™n gia t·∫°i:");
      recommendations.push("   ‚Ä¢ B·ªánh vi·ªán Nhi Trung ∆∞∆°ng - (024) 3747 0531");
      recommendations.push("   ‚Ä¢ B·ªánh vi·ªán ƒê·∫°i h·ªçc Y H√† N·ªôi - (024) 3825 2141");
      recommendations.push("   ‚Ä¢ Trung t√¢m Can thi·ªáp s·ªõm - (024) 3576 2345");
      recommendations.push("üìû Hotline t∆∞ v·∫•n mi·ªÖn ph√≠: 1900-xxx-xxx");
      recommendations.push("‚ö° N√™n b·∫Øt ƒë·∫ßu can thi·ªáp s·ªõm ƒë·ªÉ ƒë·∫°t hi·ªáu qu·∫£ t·ªët nh·∫•t.");
    }

    return recommendations.join('\n');
  }

  /**
   * L·∫•y t√™n module b·∫±ng ti·∫øng Vi·ªát
   */
  static getModuleName(module: string): string {
    switch (module) {
      case DyslexiaModule.PHONOLOGICAL_AWARENESS:
        return "Nh·∫≠n th·ª©c √¢m v·ªã";
      case DyslexiaModule.DECODING:
        return "Nh·∫≠n di·ªán ch·ªØ & gi·∫£i m√£";
      case DyslexiaModule.UNDERSTANDING_FLUENCY:
        return "T·ªëc ƒë·ªô hi·ªÉu";
      case DyslexiaModule.SPELLING_WRITING:
        return "Ch√≠nh t·∫£ & vi·∫øt";
      case DyslexiaModule.LANGUAGE_COMPREHENSION:
        return "Hi·ªÉu v√† nh·∫≠n d·∫°ng ng√¥n ng·ªØ";
      default:
        return module;
    }
  }

  /**
   * T√≠nh to√°n k·∫øt qu·∫£ test t·ªïng th·ªÉ
   */
  static calculateTestResult(
    answers: DyslexiaAnswer[],
    questions: DyslexiaQuestion[],
    testStartTime: number,
    testEndTime: number
  ): DyslexiaTestResult {
    // T√≠nh ƒëi·ªÉm t·ªïng
    const totalScore = answers.reduce((sum, answer) => sum + answer.score, 0);
    const maxScore = answers.length * 2; // M·ªói c√¢u t·ªëi ƒëa 2 ƒëi·ªÉm
    const percentage = maxScore > 0 ? (totalScore / maxScore) * 100 : 0;

    // T√≠nh ƒëi·ªÉm t·ª´ng module
    const moduleScores = this.calculateModuleScores(answers, questions);

    // X√°c ƒë·ªãnh m·ª©c ƒë·ªô r·ªßi ro
    const riskLevel = this.determineRiskLevel(percentage, moduleScores);

    // T·∫°o khuy·∫øn ngh·ªã
    const recommendations = this.generateRecommendations(riskLevel, moduleScores);

    // T√≠nh th·ªùi gian ho√†n th√†nh (ph√∫t)
    const completionTime = (testEndTime - testStartTime) / (1000 * 60);

    return {
      totalScore,
      maxScore,
      percentage,
      riskLevel,
      recommendations,
      moduleScores,
      completionTime,
      answers
    };
  }

  /**
   * L∆∞u k·∫øt qu·∫£ test v√†o localStorage (t·∫°m th·ªùi)
   */
  static saveTestResult(result: DyslexiaTestResult): void {
    const savedResults = this.getSavedTestResults();
    const newResult = {
      ...result,
      id: Date.now(),
      timestamp: new Date().toISOString()
    };
    
    savedResults.push(newResult);
    localStorage.setItem('dyslexiaTestResults', JSON.stringify(savedResults));
  }

  /**
   * L·∫•y k·∫øt qu·∫£ test ƒë√£ l∆∞u
   */
  static getSavedTestResults(): any[] {
    const saved = localStorage.getItem('dyslexiaTestResults');
    return saved ? JSON.parse(saved) : [];
  }

  /**
   * Ki·ªÉm tra c√¢u tr·∫£ l·ªùi ƒë√∫ng/sai
   */
  static checkAnswer(userAnswer: string, correctAnswer: string): boolean {
    return userAnswer.trim().toLowerCase() === correctAnswer.trim().toLowerCase();
  }
}
